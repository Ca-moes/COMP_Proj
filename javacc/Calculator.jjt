options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(Calculator)

public class Calculator {
    public static void main(String[] args) throws ParseException {
        Calculator myCalc = new Calculator(System.in);
        SimpleNode root = myCalc.Program(); // returns reference to root node
        root.dump("");  // prints the tree on the screen
    }
}

PARSER_END(Calculator)

SKIP :
{
    " " | "\t" | "\r" | "\n"
}

TOKEN :
{
     < IMPORT : "import" >
    | < DOT : ".">
    | < SEMICOLON : ";">
    | < CLASS : "class">
    | < EXTENDS : "extends">
    | < OPENCURLY : "{">
    | < CLOSECURLY : "}">
    | < PUBLIC : "public">
    | < OPENPAR : "(">
    | < CLOSEPAR : ")">
    | < COMMA : ",">
    | < RETURN : "return">
    | < STATIC : "static">
    | < VOID : "void">
    | < MAIN : "main">
    | < STRING : "String">
    | < OPENBRACKET : "[">
    | < CLOSEBRACKET : "]">
    | < INT : "int">
    | < BOOL : "boolean">
    | < IF : "if">
    | < ELSE : "else">
    | < WHILE : "while">
    | < EQUAL : "=">
    | < AND : "&&">
    | < LESSTHAN : "<">
    | < PLUS : "+">
    | < MINUS : "-">
    | < MULT : "*">
    | < DIV : "/">
    | < TRUE : "true">
    | < FALSE : "false">
    | < THIS : "this">
    | < NEW : "new">
    | < NOT : "!">
    | < LENGTH : "length" >
    | < INTEGERLITERAL : (["0"-"9"])+>
    | < IDENTIFIER : ["a"-"z", "A"-"Z", "$", "_"](["a"-"z", "A"-"Z", "0"-"9", "$", "_"])* >
}

SimpleNode Program(): {}
{
  (ImportDeclaration())* ClassDeclaration() <EOF> { return jjtThis; }
}

void ImportDeclaration() : {}
{
  <IMPORT> <IDENTIFIER> (<DOT> <IDENTIFIER>)* <SEMICOLON>
}

void ClassDeclaration() : {}
{
  <CLASS> <IDENTIFIER> [<EXTENDS> <IDENTIFIER>] <OPENCURLY> (VarDeclaration())* (MethodDeclaration())* <CLOSECURLY>
}

void VarDeclaration() : {}
{
  Type() <IDENTIFIER> <SEMICOLON>
}

void Type() #void : {}
{
  <BOOL> | <INT> [<OPENBRACKET><CLOSEBRACKET>] | <IDENTIFIER>
}

void MethodDeclaration() #void : {}
{
  <PUBLIC> MD1()
}

void Param() : {}
{
  Type() <IDENTIFIER>
}

void Return() : {}
{
  <RETURN> Expression() <SEMICOLON>
}

void MD1() #void : {}
{
  (Type() <IDENTIFIER> <OPENPAR> [Param() (<COMMA> Param())*] <CLOSEPAR> <OPENCURLY> (LOOKAHEAD(2) VarDeclaration())* (Statement())* Return()<CLOSECURLY>) #ClassMethod |
  (<STATIC> <VOID> <MAIN> <OPENPAR> <STRING> <OPENBRACKET> <CLOSEBRACKET> <IDENTIFIER> <CLOSEPAR> <OPENCURLY> (LOOKAHEAD(2) VarDeclaration())* (Statement())* <CLOSECURLY>) #MainMethod
}

void Statement() #void : {}
{
  (<OPENCURLY> (Statement())* <CLOSECURLY>) |
  (<IF> <OPENPAR> Expression() <CLOSEPAR> Statement() <ELSE> Statement()) #IfElse |
  (<WHILE> <OPENPAR> Expression() <CLOSEPAR> Statement()) #While |
  LOOKAHEAD(2) (<IDENTIFIER> #Variable [<OPENBRACKET> Expression() <CLOSEBRACKET>] <EQUAL> Expression() <SEMICOLON>) #Assignment |
  (Expression() <SEMICOLON>)
}

void Expression() : {}
{
  RelationalExpression() (<AND> RelationalExpression())*
}

void RelationalExpression() : {}
{
  AdditiveExpression() (<LESSTHAN> AdditiveExpression())*
}

void AdditiveExpression() : {}
{
  MultiplicationExpression() ((<PLUS> | <MINUS>) MultiplicationExpression())*
}

void MultiplicationExpression() : {}
{
  NotExpression() ((<MULT> | <DIV>) NotExpression())*
}

void NotExpression() : {}
{
  <NOT> NotExpression() | PrimaryExpression()
}

void PrimaryExpression() : {}
{
  PrimaryPrefix() (PrimarySuffix())*
}

void PrimaryPrefix() : {}
{
  Literal() | <THIS> | ([<DOT>] <IDENTIFIER>) | (<OPENPAR> Expression() <CLOSEPAR>) | AllocationExpression()
}

void PrimarySuffix() : {}
{
  (<DOT> (<THIS> | AllocationExpression() | <IDENTIFIER> [FunctionCall()] | <LENGTH>)) | <OPENBRACKET> Expression() <CLOSEBRACKET>
}

void FunctionCall() : {}
{
  <OPENPAR> Expression() (<COMMA> Expression())* <CLOSEPAR>
}

void Literal() : {}
{
  <INTEGERLITERAL> | BooleanLiteral()
}

void BooleanLiteral() : {}
{
  <TRUE> | <FALSE>
}


void AllocationExpression() : {}
{
  <NEW> <INT> ArrayInit()
}


void ArrayInit() : {}
{
  <OPENBRACKET> Expression() <CLOSEBRACKET>
}
