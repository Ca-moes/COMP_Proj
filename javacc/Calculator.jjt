options
{
    LOOKAHEAD=2;
}

PARSER_BEGIN(Calculator)

public class Calculator {
    public static void main(String[] args) throws ParseException {
        Calculator myCalc = new Calculator(System.in);
        SimpleNode root = myCalc.Program(); // returns reference to root node
        root.dump("");  // prints the tree on the screen
    }
}

PARSER_END(Calculator)

SKIP :
{
    " " | "\t" | "\r" | "\n"
}

TOKEN :
{
     < IMPORT : "import" >
    | < DOT : ".">
    | < SEMICOLON : ";">
    | < CLASS : "class">
    | < EXTENDS : "extends">
    | < OPENCURLY : "{">
    | < CLOSECURLY : "}">
    | < PUBLIC : "public">
    | < OPENPAR : "(">
    | < CLOSEPAR : ")">
    | < COMMA : ",">
    | < RETURN : "return">
    | < STATIC : "static">
    | < VOID : "void">
    | < MAIN : "main">
    | < STRING : "String">
    | < OPENBRACKET : "[">
    | < CLOSEBRACKET : "]">
    | < INT : "int">
    | < BOOL : "boolean">
    | < IF : "if">
    | < ELSE : "else">
    | < WHILE : "while">
    | < EQUAL : "=">
    | < AND : "&&">
    | < LESSTHAN : "<">
    | < PLUS : "+">
    | < MINUS : "-">
    | < MULT : "*">
    | < DIV : "/">
    | < TRUE : "true">
    | < FALSE : "false">
    | < THIS : "this">
    | < NEW : "new">
    | < NOT : "!">
    | < LENGTH : "length" >
    | < INTEGERLITERAL : (["0"-"9"])+>
    | < IDENTIFIER : ["a"-"z", "A"-"Z", "$", "_"](["a"-"z", "A"-"Z", "0"-"9", "$", "_"])* >
}

SimpleNode Program(): {}
{
  (ImportDeclaration())* ClassDeclaration() <EOF> { return jjtThis; }
}

void ImportDeclaration() : {}
{
  <IMPORT> <IDENTIFIER> (<DOT> <IDENTIFIER>)* <SEMICOLON>
}

void ClassDeclaration() : {}
{
  <CLASS> <IDENTIFIER> [<EXTENDS> <IDENTIFIER>] <OPENCURLY> (VarDeclaration())* (MethodDeclaration())* <CLOSECURLY>
}

void VarDeclaration() : {}
{
  Type() <IDENTIFIER> <SEMICOLON>
}

void Type() #void : {}
{
  <BOOL> | <INT> [<OPENBRACKET><CLOSEBRACKET>] | <IDENTIFIER>
}

void MethodDeclaration() #void : {}
{
  <PUBLIC> MD1()
}

void MD1() #void : {}
{
  (Type() <IDENTIFIER> <OPENPAR> [Type() <IDENTIFIER> (<COMMA> Type() <IDENTIFIER>)*] <CLOSEPAR> <OPENCURLY> (VarDeclaration())* (Statement())* <RETURN> Expression() <SEMICOLON> <CLOSECURLY>) #ClassMethod |
  (<STATIC> <VOID> <MAIN> <OPENPAR> <STRING> <OPENBRACKET> <CLOSEBRACKET> <IDENTIFIER> <CLOSEPAR> <OPENCURLY> (VarDeclaration())* (Statement())* <CLOSECURLY>) #MainMethod
}

void Statement() : {}
{
  (<OPENCURLY> (Statement())* <CLOSECURLY>) |
  (<IF> <OPENPAR> Expression() <CLOSEPAR> Statement() <ELSE> Statement()) #IfElse |
  (<WHILE> <OPENPAR> Expression() <CLOSEPAR> Statement()) #While |
  (<IDENTIFIER> [<OPENBRACKET> Expression() <CLOSEBRACKET>] <EQUAL> Expression() <SEMICOLON>) #Assignment |
  (Expression() <SEMICOLON>) #Expression
}

void Expression() #void : {}
{
  (
    <INTEGERLITERAL> #Term |
    <TRUE> |
    <FALSE> |
    <IDENTIFIER> |
    <THIS> |
    (<NEW> Exp2()) |
    (<NOT> Expression()) |
    (<OPENPAR> Expression()  <CLOSEPAR>)
  )
  Exp1()
}

void Exp1() #void : {}
{
  [
    (
      (<DOT> Exp3() #MethodAccess) |
      ((<AND> | <LESSTHAN> | <PLUS> | <MINUS> | <MULT> | <DIV>) Expression()) #BinaryOperation |
      (<OPENBRACKET> Expression() <CLOSEBRACKET>)
    )
    Exp1()
  ]
}

void Exp2() #void : {}
{
  (<INT> <OPENBRACKET> Expression() <CLOSEBRACKET>) #ArrayAccess |
  (<IDENTIFIER> <OPENPAR> <CLOSEPAR>) #FunctionCall
}

void Exp3() #void : {}
{
  <LENGTH> #Length |
  (<IDENTIFIER> <OPENPAR> [Expression() (<COMMA> Expression())*] <CLOSEPAR>) #FunctionCall
}