options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(JAVAMINUSMINUSPARSER)

import java.util.ArrayList;
import java.util.List;
import pt.up.fe.comp.jmm.report.*;

public class JAVAMINUSMINUSPARSER {
    public int par_count=0;
    public ArrayList<Report> reports = new ArrayList();

    public static void main(String[] args) throws ParseException {
        JAVAMINUSMINUSPARSER parser = new JAVAMINUSMINUSPARSER(System.in);
        SimpleNode root = parser.Program(); // returns reference to root node
        root.dump("");  // prints the tree on the screen
    }
}

PARSER_END(JAVAMINUSMINUSPARSER)

JAVACODE
void error_skipto(int kind, boolean expection) #Error {
  if (expection) {
    ParseException e = generateParseException();  // generate the exception object.
    { reports.add(new Report(ReportType.ERROR, Stage.SYNTATIC, e.currentToken.beginLine, "Error in while statement, token: " + e.currentToken)); }
  }
  Token t;
  do
  {
    //if(getToken(1).kind == OPENCURLY) break;
    t = getNextToken();
  }
  while (t.kind != kind && t.kind != EOF);
}

SKIP :
{
    " " | "\t" | "\r" | "\n"
}

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT |
  <"/**" ~["/"]> : IN_FORMAL_COMMENT |
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n"> : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}


TOKEN :
{
     < IMPORT : "import" >
    | < DOT : ".">
    | < SEMICOLON : ";">
    | < CLASS : "class">
    | < EXTENDS : "extends">
    | < OPENCURLY : "{">
    | < CLOSECURLY : "}">
    | < PUBLIC : "public">
    | < OPENPAR : "(">
    | < CLOSEPAR : ")">
    | < COMMA : ",">
    | < RETURN : "return">
    | < STATIC : "static">
    | < VOID : "void">
    | < MAIN : "main">
    | < STRING : "String">
    | < OPENBRACKET : "[">
    | < CLOSEBRACKET : "]">
    | < INT : "int">
    | < BOOL : "boolean">
    | < IF : "if">
    | < ELSE : "else">
    | < WHILE : "while">
    | < EQUAL : "=">
    | < AND : "&&">
    | < LESSTHAN : "<">
    | < PLUS : "+">
    | < MINUS : "-">
    | < MULT : "*">
    | < DIV : "/">
    | < TRUE : "true">
    | < FALSE : "false">
    | < THIS : "this">
    | < NEW : "new">
    | < NOT : "!">
    | < LENGTH : "length" >
    | < INTEGERLITERAL : (["0"-"9"])+>
    | < IDENTIFIER : ["a"-"z", "A"-"Z", "$", "_"](["a"-"z", "A"-"Z", "0"-"9", "$", "_"])* >
}

SimpleNode Program(): {}
{
  try {
    (ImportDeclaration())* ClassDeclaration() <EOF>
  } catch (ParseException e) {
    { reports.add(new Report(ReportType.ERROR, Stage.SYNTATIC, e.currentToken.beginLine, "Could not parse file")); }
  }

   { return jjtThis; }
}

// ImportDeclaration -> <IMPORT> <IDENTIFIER> [ImportAux] <SEMICOLON>
void ImportDeclaration() : {Token t;}
{
  <IMPORT>
  t=<IDENTIFIER> [ImportAux()] {jjtThis.put("value", t.image);}
  <SEMICOLON>
}

// ImportAux -> <DOT> <IDENTIFIER> [ImportAux]
void ImportAux() : {Token t;}
{
    <DOT> t=<IDENTIFIER> {jjtThis.put("value", t.image);} [ImportAux()]
}

// ClassDeclaration -> <CLASS> <IDENTIFIER>
void ClassDeclaration() : {Token t,t1; SimpleNode n; }
{
  <CLASS> t=<IDENTIFIER> { jjtThis.put("name", t.image); n = jjtThis; }
  [<EXTENDS> t1=<IDENTIFIER> { n.put("extends", t1.image); }]
  <OPENCURLY> (VarDeclaration())* (MethodDeclaration())* <CLOSECURLY>
}

// VarDeclaration -> Type <IDENTIFIER> <SEMICOLON>
void VarDeclaration() : {Token t; String type;}
{
  type=Type() t=<IDENTIFIER> { jjtThis.put("type", type); jjtThis.put("identifier", t.image); } <SEMICOLON>
}

// Type -> <BOOL> | <INT> <OPENBRACKET><CLOSEBRACKET> | <INT> | <IDENTIFIER>
String Type() #void : {Token t;}
{
  t=<BOOL> { return t.image; }
  | LOOKAHEAD(2) <INT> <OPENBRACKET><CLOSEBRACKET> { return "int[]"; }
  | t=<INT> { return t.image; }
  | t=<IDENTIFIER> { return t.image; }
}

// MethodDeclaration -> <PUBLIC> MD1
void MethodDeclaration() #void : {}
{
  <PUBLIC> MD1()
}

// Param -> Type <IDENTIFIER>
void Param() : {Token t; String type; }
{
  type=Type() t=<IDENTIFIER> { jjtThis.put("value", t.image); jjtThis.put("type", type); }
}

// Return -> <RETURN> Expression <SEMICOLON>
void Return() : {}
{
  <RETURN> Expression() <SEMICOLON>
}

// MD1 -> Type() <IDENTIFIER> <OPENPAR> [Param (<COMMA> Param)*] <CLOSEPAR> <OPENCURLY> (VarDeclaration)* (Statement)* Return <CLOSECURLY>
// MD1 -> <STATIC> <VOID> <MAIN> <OPENPAR> <STRING> <OPENBRACKET> <CLOSEBRACKET> <IDENTIFIER> <CLOSEPAR> <OPENCURLY> (VarDeclaration)* (Statement)* <CLOSECURLY>
void MD1() #void : {Token t; String returnType; }
{
  (returnType=Type() t=<IDENTIFIER> <OPENPAR> [(Param() (<COMMA> Param())*) #MethodArguments]  <CLOSEPAR> <OPENCURLY> (LOOKAHEAD(2) VarDeclaration())* (Statement())* Return()<CLOSECURLY> { jjtThis.put("name", t.image); jjtThis.put("return", returnType); }) #ClassMethod  |
  (<STATIC> <VOID> <MAIN> <OPENPAR> <STRING> <OPENBRACKET> <CLOSEBRACKET> <IDENTIFIER> <CLOSEPAR> <OPENCURLY> (LOOKAHEAD(2) VarDeclaration())* (Statement())* <CLOSECURLY>) #MainMethod
}

// IfElse -> IfStatement ElseStatement
void IfElse() #void : {} {
  IfStatement() ElseStatement()
}

// IfStatement -> <IF> <OPENPAR> Expression <CLOSEPAR> Statement
void IfStatement() : {} {
  <IF> <OPENPAR> Expression() #IfCondition <CLOSEPAR> Statement()
}

// ElseStatement -> <ELSE> Statement
void ElseStatement() : {} {
  <ELSE> Statement()
}

// While -> <WHILE> <OPENPAR> Expression <CLOSEPAR> Statement
void While() : {}
{
  try {
    <WHILE> <OPENPAR>{par_count++;} Expression() #WhileCondition <CLOSEPAR>{par_count--;}
  } catch (ParseException e) {
    boolean exception = true;
    while(par_count>0) {
      error_skipto(CLOSEPAR, exception);
      exception = false;
      par_count--;
    }
  }
   Statement()
}

// Statement -> <OPENCURLY> (Statement)* <CLOSECURLY>
// Statement -> IfElse
// Statement -> <IDENTIFIER> [<OPENBRACKET> Expression() <CLOSEBRACKET>] <EQUAL> Expression <SEMICOLON>
// Statement -> <OPENCURLY> (Statement)* <CLOSECURLY>
void Statement() #void : {Token t;}
{
  (<OPENCURLY> (Statement())* <CLOSECURLY>) |
  IfElse() |
  While() |
  LOOKAHEAD(2) (t=<IDENTIFIER> [(<OPENBRACKET> Expression() <CLOSEBRACKET>) #ArrayAccess]  <EQUAL> Expression() <SEMICOLON> {jjtThis.put("variable", t.image);}) #Assignment   |
  (Expression() <SEMICOLON>)
}

// Expression -> RelationalExpression (<AND> RelationalExpression)*
void Expression() #void : { Token t; }
{
  RelationalExpression() (t=<AND> RelationalExpression() { jjtThis.put("operation", t.image); } #AndExpression(2))*
}

// RelationalExpression -> AdditiveExpression (<LESSTHAN> AdditiveExpression)*
void RelationalExpression() #void : {Token t;}
{
  AdditiveExpression() (t=<LESSTHAN> AdditiveExpression() { jjtThis.put("operation", t.image); } #RelationalExpression(2))*
}

// AdditiveExpression -> MultiplicativeExpression ((<PLUS> | <MINUS>) MultiplicativeExpression)*
void AdditiveExpression() #void : {Token t;}
{
  MultiplicativeExpression() ((t=<PLUS> | t=<MINUS>) MultiplicativeExpression() { jjtThis.put("operation", t.image); }  #BinaryOperation(2))*
}

// MultiplicativeExpression -> NotExpression ((<MULT> | <DIV>) NotExpression)*
void MultiplicativeExpression() #void : {Token t;}
{
  NotExpression() ((t=<MULT> | t=<DIV>) NotExpression() { jjtThis.put("operation", t.image); } #BinaryOperation(2))*
}

// NotExpression -> (<NOT> NotExpression) | PrimaryExpression
void NotExpression() #void : {}
{
  (<NOT> NotExpression()) #NotExpression | PrimaryExpression()
}

// PrimaryExpression -> PrimaryPrefix (PrimarySuffix)*
void PrimaryExpression() #void : {}
{
  PrimaryPrefix() (PrimarySuffix() #AccessExpression(2))*
}

// PrimaryPrefix -> Literal | <THIS> | <IDENTIFIER> | (<OPENPAR> Expression <CLOSEPAR>) | AllocationExpression
void PrimaryPrefix() #void : {Token t;}
{
  Literal() | <THIS> { jjtThis.put("name", "this"); } #Variable | t=<IDENTIFIER>{ jjtThis.put("name", t.image); } #Variable | (<OPENPAR>{par_count++;} Expression() <CLOSEPAR>{par_count--;}) | AllocationExpression()
}

// PrimarySuffix -> <DOT> (AllocationExpression | <IDENTIFIER> [MethodCall] | <LENGTH>)
// PrimarySuffix -> <OPENBRACKET> Expression() <CLOSEBRACKET>
void PrimarySuffix() #void : {Token t;}
{
  (<DOT> (AllocationExpression()
  | (t=<IDENTIFIER>{ jjtThis.put("value", t.image); } [MethodCall()]) #MethodCall
  | <LENGTH> #Length)
  )
  | <OPENBRACKET> Expression() <CLOSEBRACKET> #ArrayAccess
}

// MethodCall -> <OPENPAR> [Expression (<COMMA> Expression)*] <CLOSEPAR>
void MethodCall() #void: {}
{
  <OPENPAR> [Expression() (<COMMA> Expression())*] <CLOSEPAR>
}

// Literal -> <INTEGERLITERAL> | BooleanLiteral
void Literal() #void : {Token t;}
{
  t=<INTEGERLITERAL>{ jjtThis.put("value", t.image); } #IntegerLiteral | BooleanLiteral()
}

// BooleanLiteral -> <TRUE> | <FALSE>
void BooleanLiteral() : {Token t;}
{
  (t=<TRUE> | t=<FALSE>) { jjtThis.put("value", t.image); }
}
// AllocationExpression -> <NEW> ((<INT> ArrayInit) | (<IDENTIFIER> <OPENPAR> <CLOSEPAR>))
void AllocationExpression() #void : {Token t;}
{
  <NEW> ((<INT> #NewIntArray ArrayInit()) | (t=<IDENTIFIER>{ jjtThis.put("value", t.image); } #NewObject <OPENPAR> <CLOSEPAR>))
}

// ArrayInit -> <OPENBRACKET> Expression <CLOSEBRACKET>
void ArrayInit() : {}
{
  <OPENBRACKET> Expression() <CLOSEBRACKET>
}
