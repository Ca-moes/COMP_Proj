WhileAndIF {


.construct WhileAndIF().V {
invokespecial(this, "<init>").V;
}

.method public static main(args.array.String).V {
a.i32 :=.i32 20.i32;
b.i32 :=.i32 10.i32;
temporary1.i32 :=.i32 10.i32;
d.array.i32 :=.array.i32 new(array, temporary1.i32).array.i32;
if (a.i32 <.i32 b.i32) goto ifbody1;
else2:
c.i32 :=.i32 b.i32 -.i32 1.i32;
goto endif1;
ifbody1:
c.i32 :=.i32 a.i32 -.i32 1.i32;
goto endif1;
endif1:
goto loop1;
loop1:
temporary2.i32 :=.i32 0.i32 -.i32 1.i32;
if (temporary2.i32 <.i32 c.i32) goto loopbody1;
end1:
goto endloop1;
loopbody1:
d[c.i32].i32 :=.i32 a.i32 -.i32 b.i32;
c.i32 :=.i32 c.i32 -.i32 1.i32;
a.i32 :=.i32 a.i32 -.i32 1.i32;
b.i32 :=.i32 b.i32 -.i32 1.i32;
goto loop1;
endloop1:
c.i32 :=.i32 0.i32;
loop2:
temporary3.i32 :=.i32 arraylength(d.array.i32).i32;
if (c.i32 <.i32 temporary3.i32) goto loopbody2;
end2:
goto endloop2;
loopbody2:
temporary4.i32 :=.i32 d[c.i32].i32;
invokestatic(io, "println", temporary4.i32).V;
c.i32 :=.i32 c.i32 +.i32 1.i32;
goto loop2;
endloop2:
ret.V 0.V;
}
}